datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general_regulons","ran_general","strict","ran_strict","simple","ran_simple","realcomplex","ran_realcomplex","conformation","ran_conformation_perc","conf_effect","ran_conformationeffect","GOs","ran_gos")) # Copy this vector into axis(1..., labels=)
#### BOXPLOT ####
length(levels(datatoplot$set))          #To know how many bars will be plotted in at arg
## Create boxplot
boxplot(Perc~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","paleturquoise4","gainsboro"),outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random","Pathways","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1.1, at=seq(from=0, to=1, by=.1))
title(ylab="Fraction of genes in GO", cex.lab=1)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random","Pathways","Random"),mgp=c(3,1,0))
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
#### GET MEDIANS ####
for(st in levels(datatoplot$set)){
print(st)
print(median(datatoplot[datatoplot$set==st,2]))
}
# Calculate correlations
# Create object to save correlations
all_names <- levels(datatoplot$set)
points <- datatoplot
all_cors <- matrix(ncol=length(all_names),nrow=length(all_names))
colnames(all_cors) <- all_names
rownames(all_cors) <- all_names
for(set1 in all_names){
print(set1)
for(set2 in all_names){
wt <- wilcox.test(points[which(points$set == set1),2],points[which(points$set == set2),2])
all_cors[set1,set2] <- wt$p.value
}
print(all_cors)
heatmap(all_cors,symm=TRUE)
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/gos")
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/gos")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),Perc=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/gos/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,"_golevels",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=NULL, comment.char="#")
levels <- summ[,c(1,6)] # Filters for the columns that are informative
levels <- unique(levels) # Filters instances of several GOs with same level and percentage
print(dim(levels))
temp <- data.frame(set=dataset,Perc=levels[,2])
allpoints <- rbind(allpoints,temp)
}
## Get points of real connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),connectivity=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,".",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
summ_o2 <- summ[which(summ$Total.Enzymatic.reactions >= 2),9,drop=FALSE]
summ_o2 <- round(summ_o2$Connectivity,digits=1)
temp <- data.frame(set=dataset,connectivity=summ_o2)
allpoints <- rbind(allpoints,temp)
print(length(summ_o2))
}
## Get points of random connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn")
#Save summary file names
filenames <- dir();
all_randoms <- character()
randompoints <- data.frame(set=character(),connectivity=numeric())
for (file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn/",file,sep="")
print(filepath)
dataset <- paste("ran",unlist(strsplit(file,"_random",fixed=TRUE))[1],sep="_")
all_randoms <- append(all_randoms,dataset)
#Read file - delete # char from header in file before reading
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
# Turn all random points to a single vector
dims <- dim(summ)
totalvs <- dims[1] * dims[2]
random <- as.matrix(summ)
dim(random) <- c(totalvs,1)
random <- random[,1]
random <- random[!is.na(random)]
length(random)
# Create new object to save values for boxplot
tmp <- data.frame(set=dataset,connectivity=random)
# Merge to all points
randompoints <- rbind(randompoints,tmp)
dim(randompoints)
}
## SELECT SETS TO PLOT
# Look at available real levels
levels(allpoints$set)
# Look at available random levels
levels(randompoints$set)
## Save in vector RANDOM levels to plot to create new data frame with those levels -
toplot <- levels(randompoints$set)[c(6,11,9,5,4,8)]
#toplot <- levels(randompoints$set) # To plot all levels
for (pl in toplot){
tmp <- randompoints[randompoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general","ran_general","strict","ran_strict","simple","ran_simple","real_complex","ran_real_complex","conformation","ran_conformation","conf_effect","ran_conformation_effect","pathways","ran_pathways")) # Copy this vector into axis(1..., labels=)
## Get points of real connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),connectivity=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,".",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
summ_o2 <- summ[which(summ$Total.Enzymatic.reactions >= 2),9,drop=FALSE]
summ_o2 <- round(summ_o2$Connectivity,digits=1)
temp <- data.frame(set=dataset,connectivity=summ_o2)
allpoints <- rbind(allpoints,temp)
print(length(summ_o2))
}
## Get points of random connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn")
#Save summary file names
filenames <- dir();
all_randoms <- character()
randompoints <- data.frame(set=character(),connectivity=numeric())
for (file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn/",file,sep="")
print(filepath)
dataset <- paste("ran",unlist(strsplit(file,"_random",fixed=TRUE))[1],sep="_")
all_randoms <- append(all_randoms,dataset)
#Read file - delete # char from header in file before reading
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
# Turn all random points to a single vector
dims <- dim(summ)
totalvs <- dims[1] * dims[2]
random <- as.matrix(summ)
dim(random) <- c(totalvs,1)
random <- random[,1]
random <- random[!is.na(random)]
length(random)
# Create new object to save values for boxplot
tmp <- data.frame(set=dataset,connectivity=random)
# Merge to all points
randompoints <- rbind(randompoints,tmp)
dim(randompoints)
}
## SELECT SETS TO PLOT
# Look at available real levels
levels(allpoints$set)
# Look at available random levels
levels(randompoints$set)
## Save in vector REAL levels to plot to create new data frame with those levels -
toplot <- levels(allpoints$set)[c(6,10,9,8,5,4,7)]
#toplot <- levels(allpoints$set) #For plotting all levels
datatoplot <- data.frame(set=character(),connectivity=numeric()) # Declare data frame that will go to plot
for (pl in toplot){
tmp <- allpoints[allpoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Save in vector RANDOM levels to plot to create new data frame with those levels -
toplot <- levels(randompoints$set)[c(6,11,9,5,4,8)]
#toplot <- levels(randompoints$set) # To plot all levels
for (pl in toplot){
tmp <- randompoints[randompoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general","ran_general","strict","ran_strict","simple","ran_simple","real_complex","ran_real_complex","conformation","ran_conformation","conf_effect","ran_conformation_effect","pathways","ran_pathways")) # Copy this vector into axis(1..., labels=)
#### BOXPLOT ####
length(levels(datatoplot$set))          #To know how many bars will be plotted in at arg
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("cadetblue3","gainsboro","lightcoral","gainsboro","coral3","gainsboro","greenyellow","gainsboro","darkgoldenrod2","gainsboro","deepskyblue3","gainsboro","paleturquoise4","gainsboro","darkmagenta","gainsboro","sienna1","gainsboro","palevioletred3","gainsboro","tan3","gainsboro","darkolivegreen4","gainsboro"),boxwex=0.4,notch=TRUE)
## Save in vector REAL levels to plot to create new data frame with those levels -
toplot <- levels(allpoints$set)[c(6,10,9,8,5,4,7)]
#toplot <- levels(allpoints$set) #For plotting all levels
datatoplot <- data.frame(set=character(),connectivity=numeric()) # Declare data frame that will go to plot
for (pl in toplot){
tmp <- allpoints[allpoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Save in vector RANDOM levels to plot to create new data frame with those levels -
toplot <- levels(randompoints$set)[c(6,11,10,9,5,4,8)]
#toplot <- levels(randompoints$set) # To plot all levels
for (pl in toplot){
tmp <- randompoints[randompoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general","ran_general","strict","ran_strict","simple","ran_simple","real_complex","ran_real_complex","conformation","ran_conformation","conf_effect","ran_conformation_effect","pathways","ran_pathways")) # Copy this vector into axis(1..., labels=)
#### BOXPLOT ####
length(levels(datatoplot$set))          #To know how many bars will be plotted in at arg
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("cadetblue3","gainsboro","lightcoral","gainsboro","coral3","gainsboro","greenyellow","gainsboro","darkgoldenrod2","gainsboro","deepskyblue3","gainsboro","paleturquoise4","gainsboro","darkmagenta","gainsboro","sienna1","gainsboro","palevioletred3","gainsboro","tan3","gainsboro","darkolivegreen4","gainsboro"),boxwex=0.4,notch=TRUE)
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","darkmagenta","gainsboro"),boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=0.8, at=1:length(levels(datatoplot$set)), labels=levels(datatoplot$set),mgp=c(3,1,0))
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","darkmagenta","gainsboro"),boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1.3, at=seq(from=0, to=1, by=.1))
title(ylab="Connectivity", cex.lab=1)
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","darkmagenta","gainsboro"),boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1, at=seq(from=0, to=1, by=.1))
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","darkmagenta","gainsboro"),boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1.1, at=seq(from=0, to=1, by=.1))
title(ylab="Connectivity", cex.lab=1)
#### GET MEDIANS ####
for(st in levels(datatoplot$set)){
print(st)
print(median(datatoplot[datatoplot$set==st,2]))
}
# Calculate correlations
# Create object to save correlations
all_names <- levels(datatoplot$set)
points <- datatoplot
all_cors <- matrix(ncol=length(all_names),nrow=length(all_names))
colnames(all_cors) <- all_names
rownames(all_cors) <- all_names
for(set1 in all_names){
print(set1)
for(set2 in all_names){
wt <- wilcox.test(points[which(points$set == set1),2],points[which(points$set == set2),2])
all_cors[set1,set2] <- wt$p.value
}
print(all_cors)
heatmap(all_cors,symm=TRUE)
## Get points of real connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),connectivity=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,".",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
summ_o2 <- summ[which(summ$Total.Enzymatic.reactions >= 2),9,drop=FALSE]
summ_o2 <- round(summ_o2$Connectivity,digits=1)
temp <- data.frame(set=dataset,connectivity=summ_o2)
allpoints <- rbind(allpoints,temp)
print(length(summ_o2))
}
## Create boxplot
boxplot(connectivity~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",names=FALSE,col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","darkmagenta","gainsboro"),boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","Pathways","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1.1, at=seq(from=0, to=1, by=.1))
title(ylab="Connectivity", cex.lab=1)
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/gos")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),Perc=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/gos/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,"_golevels",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=NULL, comment.char="#")
levels <- summ[,c(1,6)] # Filters for the columns that are informative
levels <- unique(levels) # Filters instances of several GOs with same level and percentage
print(dim(levels))
temp <- data.frame(set=dataset,Perc=levels[,2])
allpoints <- rbind(allpoints,temp)
}
## Add random values
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/random_gos/percs")
#Save summary file names
filenames <- dir();
all_randoms <- character()
randompoints <- data.frame(set=character(),Perc=numeric())
for (file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/GO_levels_extended/results/random_gos/percs/",file,sep="")
print(filepath)
dataset <- paste("ran",unlist(strsplit(file,"_random",fixed=TRUE))[1],sep="_")
all_randoms <- append(all_randoms,dataset)
#Read file - delete # char from header in file before reading
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
# Turn all random points to a single vector
dims <- dim(summ)
totalvs <- dims[1] * dims[2]
random <- as.matrix(summ)
dim(random) <- c(totalvs,1)
random <- random[,1]
random <- random[!is.na(random)]
length(random)
# Create new object to save values for boxplot
tmp <- data.frame(set=dataset,Perc=random)
# Merge to all points
randompoints <- rbind(randompoints,tmp)
dim(allpoints)
}
## SELECT SETS TO PLOT
# Look at available real levels
levels(allpoints$set)
# Look at available random levels
levels(randompoints$set)
## Save in vector REAL levels to plot to create new data frame with those levels -
toplot <- levels(allpoints$set)[c(5,10,9,8,4,3,6)]
#toplot <- levels(allpoints$set) # If all levels will be plotted
datatoplot <- data.frame(set=character(),Perc=numeric()) # Declare data frame that will go to plot
for (pl in toplot){
tmp <- allpoints[allpoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Save in vector RANDOM levels to plot to create new data frame with those levels -
toplot <- levels(randompoints$set)[c(6,11,10,9,4,5,7)]
#toplot <- levels(randompoints$set)
for (pl in toplot){
tmp <- randompoints[randompoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general_regulons","ran_general","strict","ran_strict","simple","ran_simple","realcomplex","ran_realcomplex","conformation","ran_conformation_perc","conf_effect","ran_conformationeffect","GOs","ran_gos")) # Copy this vector into axis(1..., labels=)
## Create boxplot
boxplot(Perc~set,data=datatoplot, frame=FALSE,at=1:length(levels(datatoplot$set)), col=c("deepskyblue3","gainsboro","tan3","gainsboro","palevioletred3","gainsboro","sienna1","gainsboro","darkgoldenrod2","gainsboro","greenyellow","gainsboro","paleturquoise4","gainsboro"),outpch=4, outcex=0.5,border="gray47",xaxt="n",yaxt="n",ylim=c(0.1,1),names=FALSE,boxwex=0.4,notch=TRUE)
## Add axis annotation
axis(1, las=2, cex.axis=1, at=1:length(levels(datatoplot$set)), labels=c("General","Random","Strict","Random","Simple","Random","Complex","Random","Conf","Random","Conf+Eff","Random","GOs","Random"),mgp=c(3,1,0))
axis(2, las=2, cex.axis=1.1, at=seq(from=0.1, to=1, by=.1))
title(ylab="Fraction of genes in GO", cex.lab=1)
## Get points of real connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries")
#Save summary file names
filenames <- dir()
all_datasets <- character()
# Create object to save all values for boxplot
allpoints <- data.frame(set=character(),connectivity=numeric())
for(file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/summaries/",file,sep="")
print(filepath)
dataset <- unlist(strsplit(file,".",fixed=TRUE))[1]
all_datasets <- append(all_datasets,dataset)
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
summ_o2 <- summ[which(summ$Total.Enzymatic.reactions >= 2),9,drop=FALSE]
summ_o2 <- round(summ_o2$Connectivity,digits=1)
temp <- data.frame(set=dataset,connectivity=summ_o2)
allpoints <- rbind(allpoints,temp)
print(length(summ_o2))
}
## Get points of random connectivity
#Place on dir path
setwd("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn")
#Save summary file names
filenames <- dir();
all_randoms <- character()
randompoints <- data.frame(set=character(),connectivity=numeric())
for (file in filenames){
# Obtain complete file path to open file.
filepath <- paste("/Users/Daniela/Documents/CCG/GU_art_2/connectivity/general_analysis/random_conn/",file,sep="")
print(filepath)
dataset <- paste("ran",unlist(strsplit(file,"_random",fixed=TRUE))[1],sep="_")
all_randoms <- append(all_randoms,dataset)
#Read file - delete # char from header in file before reading
summ <- read.delim(file=filepath, header=TRUE, row.names=1, comment.char="#")
# Turn all random points to a single vector
dims <- dim(summ)
totalvs <- dims[1] * dims[2]
random <- as.matrix(summ)
dim(random) <- c(totalvs,1)
random <- random[,1]
random <- random[!is.na(random)]
length(random)
# Create new object to save values for boxplot
tmp <- data.frame(set=dataset,connectivity=random)
# Merge to all points
randompoints <- rbind(randompoints,tmp)
dim(randompoints)
}
## SELECT SETS TO PLOT
# Look at available real levels
levels(allpoints$set)
# Look at available random levels
levels(randompoints$set)
## Save in vector REAL levels to plot to create new data frame with those levels -
toplot <- levels(allpoints$set)[c(6,10,9,8,5,4,7)]
#toplot <- levels(allpoints$set) #For plotting all levels
datatoplot <- data.frame(set=character(),connectivity=numeric()) # Declare data frame that will go to plot
for (pl in toplot){
tmp <- allpoints[allpoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Save in vector RANDOM levels to plot to create new data frame with those levels -
toplot <- levels(randompoints$set)[c(6,11,10,9,5,4,8)]
#toplot <- levels(randompoints$set) # To plot all levels
for (pl in toplot){
tmp <- randompoints[randompoints$set==pl,]
# Merge to all points
datatoplot <- rbind(datatoplot,tmp)
}
## Order sets for plot with:
datatoplot$set = factor(datatoplot$set,c("general","ran_general","strict","ran_strict","simple","ran_simple","real_complex","ran_real_complex","conformation","ran_conformation","conf_effect","ran_conformation_effect","pathways","ran_pathways")) # Copy this vector into axis(1..., labels=)
levels(datatoplot$set)
#### BARPLOTS ####
toplot <- levels(datatoplot$set)[c(7,8)]
both <- data.frame(0.0=numeric(),0.1=numeric(),0.2=numeric(),0.3=numeric(),0.4=numeric(),0.5=numeric(),0.6=numeric(),0.7=numeric(),0.8=numeric(),0.9=numeric(),1.0=numeric())
for(pl in toplot){
values <- round(datatoplot[datatoplot$set==pl,2],digits=1)
counts <- table(values)
percs <- (counts/sum(counts))*100
sum(percs)                          # Checks if sum of percentages is 100
both <- rbind(both,percs)
}
max(both)                               # To set y limit
both <- data.frame(0.0=numeric(),0.1=numeric(),0.2=numeric(),0.3=numeric(),0.4=numeric(),0.5=numeric(),0.6=numeric(),0.7=numeric(),0.8=numeric(),0.9=numeric(),1.0=numeric())
both <- data.frame(x0.0=numeric(),x0.1=numeric(),x0.2=numeric(),x0.3=numeric(),x0.4=numeric(),x0.5=numeric(),x0.6=numeric(),x0.7=numeric(),x0.8=numeric(),x0.9=numeric(),x1.0=numeric())
for(pl in toplot){
values <- round(datatoplot[datatoplot$set==pl,2],digits=1)
counts <- table(values)
percs <- (counts/sum(counts))*100
sum(percs)                          # Checks if sum of percentages is 100
both <- rbind(both,percs)
}
max(both)                               # To set y limit
barplot(both, ylim=c(-0.5,45), col="", axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
both
both <- data.frame(x0.0=numeric(),x0.1=numeric(),x0.2=numeric(),x0.3=numeric(),x0.4=numeric(),x0.5=numeric(),x0.6=numeric(),x0.7=numeric(),x0.8=numeric(),x0.9=numeric(),x1.0=numeric())
both
for(pl in toplot){
values <- round(datatoplot[datatoplot$set==pl,2],digits=1)
counts <- table(values)
percs <- (counts/sum(counts))*100
sum(percs)                          # Checks if sum of percentages is 100
both <- rbind(both,percs)
}
both
colnames(both) <- c("v0","v1","v2","v3","v4","v5","v6","v7","v8","v9","v10")
both
rownames(both) <- toplot
both
both <- as.matrix(both)
barplot(both, ylim=c(-0.5,45), col="", axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
barplot(both, ylim=c(-0.5,45), col="sienna1", axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
barplot(both, besides=TRUE,ylim=c(-0.5,45), col="sienna1", axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
barplot(both, beside=TRUE,ylim=c(-0.5,45), col="sienna1", axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
barplot(both, beside=TRUE,ylim=c(-0.5,45), col=c("sienna1","gainsboro"), axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
axis(1, las=2, cex.axis=1, at=seq(from=0.75, to=13, by=1.2),labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
axis(1, las=2, cex.axis=1, at=seq(from=1.95, to=26, by=2.8))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
barplot(both, beside=TRUE,ylim=c(-0.5,45), col=c("sienna1","gainsboro"), axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
axis(1, las=2, cex.axis=1, at=seq(from=1.95, to=26, by=2.8))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
axis(1, las=2, cex.axis=1, at=seq(from=1.95, to=26, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
barplot(both, beside=TRUE,ylim=c(-0.5,45), col=c("sienna1","gainsboro"), axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
axis(1, las=2, cex.axis=1, at=seq(from=1.95, to=26, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
barplot(both, beside=TRUE,ylim=c(-0.5,45), col=c("sienna1","gainsboro"), axes=FALSE, border=FALSE, ann=FALSE, axisnames=FALSE)
axis(1, las=2, cex.axis=1, at=seq(from=2, to=26, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
axis(1, las=2, cex.axis=1, at=seq(from=2, to=30, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
axis(1, las=2, cex.axis=1, at=seq(from=2, to=33, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
axis(1, las=2, cex.axis=1, at=seq(from=2, to=32, by=3))#,labels=c("0.0","0.1","0.2","0.3","0.4","0.5","0.6","0.7","0.8","0.9","1.0"))
setwd("/Users/Daniela/Desktop/Temporal")
getwd()
library(devtools)
install_github("insomnium098/Proyecto-Cytoscape/RegulonDBCytoscape")
library(RegulonDBCytoscape)
x <- c("/Users/Daniela/Documents/CCG/datasets_GUs_v10/SRsGUs/AraC")
cytoscapeRegulon(x)
x <- c("/Users/Daniela/Documents/CCG/datasets_GUs_v10/SRsGUs/XylR")
cytoscapeRegulon(x)
